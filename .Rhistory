ggplot(variants_clean, aes(x = region_type, fill = severity_group)) +
geom_bar(position = "fill") +
labs(title = "Proportion of Variant Location Type by Severity",
x = "Region Type",
y = "Proportion",
fill = "Severity Group") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate the proportion of severe and non-severe by region type
severity_proportions <- variants_clean %>%
group_by(region_type, severity_group) %>%
tally() %>%
group_by(region_type) %>%
mutate(proportion = n / sum(n))
# Visualize the proportions
ggplot(severity_proportions, aes(x = region_type, y = proportion, fill = severity_group)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Proportion of Severe vs Non-Severe Cases by Variant Location Type",
x = "Region Type",
y = "Proportion",
fill = "Severity Group") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(variants_clean,
aes(x = hg19_start, xend = hg19_end, y = severity_group)) +
geom_segment(linewidth = 1, color = "blue") +
labs(title = "Variants by HG19 Coordinates along Factor VIII Gene",
x = "Genomic Position (Start to End)",
y = "Severity Group") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(labels = scales::scientific,
breaks = seq(min(variants_clean$hg19_start),
max(variants_clean$hg19_end),
length.out = 10))
ggplot(variants_clean,
aes(x = hg19_start, xend = hg19_end, y = region_type)) +
geom_segment(aes(yend = region_type), alpha = 0.7) +
labs(title = "HG19 Genomic Start and End Positions by Variant Location Type",
x = "Genomic Coordinate (HG19)",
y = "Variant Location Type") +
theme_minimal() +
scale_x_continuous(labels = scales::scientific,
breaks = seq(min(variants_clean$hg19_start),
max(variants_clean$hg19_end),
length.out = 10))
ggplot(variants_clean,
aes(x = hg19_start, xend = hg19_end, y = severity_group, color = region_type)) +
geom_segment(linewidth = 1) +
labs(title = "Variant Locations by Region Type and HG19 Coordinates",
x = "Genomic Position (Start to End)",
y = "Severity Group") +
facet_wrap(~ region_type) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(labels = scales::scientific, breaks = seq(min(variants_clean$hg19_start), max(variants_clean$hg19_end), length.out = 5))
#| warning: False
# Shapiro-Wilk Test for Normality for both groups (Severe vs Non-Severe)
shapiro_severe <- shapiro.test(variants_clean$range
[variants_clean$severity_group == "Severe"])
shapiro_non_severe <- shapiro.test(variants_clean$range
[variants_clean$severity_group == "Non-Severe"])
# Levene's Test for Homogeneity of Variance
levene_test <- car::leveneTest(range ~ severity_group, data = variants_clean)
# Check the results
shapiro_severe
shapiro_non_severe
levene_test
wilcox_result <- wilcox.test(range ~ severity_group, data = variants_clean)
print(wilcox_result)
# Fisher's test for domain
contingency_domain <- table(variants_clean$domain, variants_clean$severity_group)
fisher_domain_result <- fisher.test(contingency_domain, simulate.p.value = TRUE)
print(fisher_domain_result)
#| output: false
contingency_domain
# Plot the distribution of severity across domains
ggplot(variants_clean, aes(x = domain, fill = severity_group)) +
geom_bar(position = "fill") +
labs(title = "Severity Distribution by Domain",
x = "Domain",
y = "Proportion",
fill = "Severity Group") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Fisher's test for subtype
contingency_subtype <- table(variants_clean$subtype, variants_clean$severity_group)
fisher_subtype_result <- fisher.test(contingency_subtype, simulate.p.value = TRUE)
print(fisher_subtype_result)
# Fisher's test for codon
contingency_codons <- table(variants_clean$codon, variants_clean$severity_group)
fisher_codon_result <- fisher.test(contingency_codons, simulate.p.value = TRUE)
print(fisher_codon_result)
#| output: false
contingency_subtype
# Plot the distribution of severity across subtypes
ggplot(variants_clean, aes(x = subtype, fill = severity_group)) +
geom_bar(position = "fill") +
labs(title = "Severity Distribution by Subtype",
x = "Variant Subtype",
y = "Proportion",
fill = "Severity Group") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Fisher's test for Poly-A in regulatory region
contingency_poly_a <- table(variants_clean$in_poly_a, variants_clean$severity_group)
fisher_poly_a_result <- fisher.test(contingency_poly_a, simulate.p.value = TRUE)
print(fisher_poly_a_result)
contingency_poly_a
#Visualize most common variant types and mechanisms for severe Hemophilia variants
# Grouped bar plot for variant_type and mechanism
ggplot(grouped_variant_mechanism_count_sev,
aes(x = variant_type, y = n, fill = mechanism)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Variant Type and Mechanism Count",
x = "Variant Type",
y = "Count",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.5),
plot.title = element_text(size = 14)) +
theme_minimal() +
coord_flip()
#Visualize most common variant types and mechanisms for severe Hemophilia variants
# Grouped bar plot for variant_type and mechanism
ggplot(grouped_variant_mechanism_count_sev,
aes(x = variant_type, y = n, fill = mechanism)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Variant Type and Mechanism Count",
x = "Variant Type",
y = "Count",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.5), element_text(size = 14)) +
theme_minimal() +
coord_flip()
#Visualize most common variant types and mechanisms for severe Hemophilia variants
# Grouped bar plot for variant_type and mechanism
ggplot(grouped_variant_mechanism_count_sev,
aes(x = variant_type, y = n, fill = mechanism)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Variant Type and Mechanism Count",
x = "Variant Type",
y = "Count",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.5), element_text(size = 16)) +
theme_minimal() +
coord_flip()
#Visualize most common variant types and mechanisms for severe Hemophilia variants
# Grouped bar plot for variant_type and mechanism
ggplot(grouped_variant_mechanism_count_sev,
aes(x = variant_type, y = n, fill = mechanism)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Variant Type and Mechanism Count",
x = "Variant Type",
y = "Count",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.5), element_text(size = 30)) +
theme_minimal() +
coord_flip()
#Visualize most common variant types and mechanisms for severe Hemophilia variants
# Grouped bar plot for variant_type and mechanism
ggplot(grouped_variant_mechanism_count_sev,
aes(x = variant_type, y = n, fill = mechanism)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Variant Type and Mechanism Count",
x = "Variant Type",
y = "Count",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
# Grouped bar plot for variant_type and mechanism
ggplot(grouped_variant_mechanism_count_sev,
aes(x = variant_type, y = n, fill = mechanism)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Variant Type and Mechanism Count",
x = "Variant Type",
y = "Count",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.5), element_text(size = 14)) +
coord_flip()
#Visualize most common variant types and mechanisms for severe Hemophilia variants
# Grouped bar plot for variant_type and mechanism
ggplot(grouped_variant_mechanism_count_sev,
aes(x = variant_type, y = n, fill = mechanism)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Variant Type and Mechanism Count",
x = "Variant Type",
y = "Count",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal() +
coord_flip()
#| output: false
#| warning: false
#Load necessary libraries
library(tidyr)
library(dplyr)
library(ggplot2)
library(readr)
library(readxl)
library(janitor)
library(stringr)
library(skimr)
library(purrr)
library(forcats)
library(car)
#Load data and check column types
variants <- readxl::read_excel(here::here('CHAMP_Variant_List_2022.xlsx'),
sheet = 2, guess_max = 4000)
# Clean data: Apply clean_names to the dataset to convert data to snake case
variants <- variants %>%
clean_names()
# Select relevant columns
variants_clean <- variants %>%
select(
hgvs_c_dna, hg19_coordinates, hgvs_protein, mature_protein, variant_type,
mechanism, exon, codon, domain, subtype, in_poly_a,
reported_clinical_severity, year_reported
)
# Convert explanatory variables to factors (categorical)
variants_clean <- variants_clean %>%
mutate(across(
c(
variant_type, mechanism, exon, domain, subtype,
in_poly_a, reported_clinical_severity
), as.factor
))
# Make sure that `year_reported` is numeric
variants_clean <- variants_clean %>%
mutate(year_reported = as.numeric(year_reported))
skim(variants_clean)
#| output: false
variants_clean %>%
count(hgvs_c_dna) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
variants_clean %>%
count(hg19_coordinates) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
variants_clean %>%
filter(!is.na(hgvs_protein)) %>%
count(hgvs_protein) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
variants_clean %>%
filter(!is.na(mature_protein)) %>%
count(mature_protein) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
variant_type_count <- variants_clean %>%
count(variant_type) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
variants_clean <- variants_clean %>%
mutate(mechanism = str_to_lower(mechanism))
mechanism_count <- variants_clean %>%
count(mechanism) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
grouped_variant_mechanism_count <- variants_clean %>%
count(variant_type, mechanism) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
variants_clean %>%
count(exon) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
variants_clean %>%
count(codon) %>%
arrange(desc(n))
#| output: false
variants_clean %>%
count(domain) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
#Subtype can be cleaned through case standardization
variants_clean <- variants_clean %>%
mutate(subtype = str_to_lower(subtype))
variants_clean %>%
count(subtype) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
variants_clean <- variants_clean %>%
mutate(in_poly_a = str_to_lower(in_poly_a))
variants_clean %>%
count(in_poly_a) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
variants_clean <- variants_clean %>%
mutate(reported_clinical_severity = str_to_lower(reported_clinical_severity))
variants_clean %>%
count(reported_clinical_severity) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#| output: false
variants_clean %>%
count(year_reported) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
#top 5 frequency for each variable
purrr::map_dfr(variants_clean, ~as.data.frame
(head(sort(table(.), decreasing = TRUE), 5)),
.id = "variable")
#filter for severe clinical severity only
severe_hemo <- variants_clean %>%
filter(reported_clinical_severity == "severe")
# Convert explanatory variables to factors (categorical)
severe_hemo <- severe_hemo %>%
mutate(across(
c(variant_type, mechanism, exon, domain, subtype, in_poly_a,
reported_clinical_severity
), as.factor
))
#Check for nulls, always an important step to examine (and later, handle)
#null data before performing statistical analysis
skim(severe_hemo)
#| output: false
#Examine some frequency counts and proportions for severe Hemophilia variants
# Frequency count and proportion for variant_type
variant_type_count_sev <- severe_hemo %>%
count(variant_type) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
# Frequency count and proportion for mechanism
mechanism_count_sev <- severe_hemo %>%
count(mechanism) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
# Frequency count and proportion for variant_type and mechanism grouped together
grouped_variant_mechanism_count_sev <- severe_hemo %>%
count(variant_type, mechanism) %>%
mutate(proportion = n / sum(n)) %>%
arrange(desc(n))
# View
variant_type_count_sev
mechanism_count_sev
grouped_variant_mechanism_count_sev
#Visualize most common variant types for severe Hemophilia variants
# Bar plot for variant_type frequency
ggplot(variant_type_count_sev, aes(x = reorder(variant_type, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Frequency of Variant Types",
x = "Variant Type",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
#Visualize most frequent mechanisms for severe Hemophilia variants
# Bar plot for mechanism frequency
ggplot(mechanism_count_sev, aes(x = reorder(mechanism, n), y = n)) +
geom_bar(stat = "identity", fill = "lightgreen") +
coord_flip() +
labs(title = "Frequency of Mechanisms",
x = "Mechanism",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
#Visualize most common variant types and mechanisms for severe Hemophilia variants
# Grouped bar plot for variant_type and mechanism
ggplot(grouped_variant_mechanism_count_sev,
aes(x = variant_type, y = n, fill = mechanism)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Variant Type and Mechanism Count",
x = "Variant Type",
y = "Count",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal() +
coord_flip()
#Visualize most common variant types and mechanisms for severe Hemophilia variants
# Grouped bar plot for variant_type and mechanism
ggplot(grouped_variant_mechanism_count_sev,
aes(x = variant_type, y = n, fill = mechanism)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Variant Type and Mechanism Count",
x = "Variant Type",
y = "Count",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal() +
coord_flip()
#Visualize most common variant types and mechanisms for severe Hemophilia variants
# Grouped bar plot for variant_type and mechanism
ggplot(grouped_variant_mechanism_count_sev,
aes(x = variant_type, y = n, fill = mechanism)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Variant Type and Mechanism Count",
x = "Variant Type",
y = "Count",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal() +
coord_flip()
# Bar plot for mechanism frequency
ggplot(mechanism_count_sev, aes(x = reorder(mechanism, n), y = n)) +
geom_bar(stat = "identity", fill = "lightgreen") +
coord_flip() +
labs(title = "Frequency of Mechanisms",
x = "Mechanism",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5))
#Visualize most frequent mechanisms for severe Hemophilia variants
# Bar plot for mechanism frequency
ggplot(mechanism_count_sev, aes(x = reorder(mechanism, n), y = n)) +
geom_bar(stat = "identity", fill = "lightgreen") +
coord_flip() +
labs(title = "Frequency of Mechanisms",
x = "Mechanism",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
#Visualize most common variant types and mechanisms for severe Hemophilia variants
# Grouped bar plot for variant_type and mechanism
ggplot(grouped_variant_mechanism_count_sev,
aes(x = variant_type, y = n, fill = mechanism)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Variant Type and Mechanism Count",
x = "Variant Type",
y = "Count",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.8)) +
theme_minimal() +
coord_flip()
#Visualize most common variant types for severe Hemophilia variants
# Bar plot for variant_type frequency
ggplot(variant_type_count_sev, aes(x = reorder(variant_type, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Frequency of Variant Types",
x = "Variant Type",
y = "Frequency") +
theme_minimal()
#Visualize most common variant types for severe Hemophilia variants
# Bar plot for variant_type frequency
ggplot(variant_type_count_sev, aes(x = reorder(variant_type, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Frequency of Variant Types",
x = "Variant Type",
y = "Frequency") +
theme_minimal()
#Visualize most common variant types for severe Hemophilia variants
# Bar plot for variant_type frequency
ggplot(variant_type_count_sev, aes(x = reorder(variant_type, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Frequency of Variant Types",
x = "Variant Type",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
#Visualize most frequent mechanisms for severe Hemophilia variants
# Bar plot for mechanism frequency
ggplot(mechanism_count_sev, aes(x = reorder(mechanism, n), y = n)) +
geom_bar(stat = "identity", fill = "lightgreen") +
coord_flip() +
labs(title = "Frequency of Mechanisms",
x = "Mechanism",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5))
#Visualize most frequent mechanisms for severe Hemophilia variants
# Bar plot for mechanism frequency
ggplot(mechanism_count_sev, aes(x = reorder(mechanism, n), y = n)) +
geom_bar(stat = "identity", fill = "lightgreen") +
coord_flip() +
labs(title = "Frequency of Mechanisms",
x = "Mechanism",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
# Bar plot for mechanism frequency
ggplot(mechanism_count_sev, aes(x = reorder(mechanism, n), y = n)) +
geom_bar(stat = "identity", fill = "lightgreen") +
coord_flip() +
labs(title = "Frequency of Mechanisms",
x = "Mechanism",
y = "Frequency") +
theme(plot.title = element_text(hjust = 1)) +
theme_minimal()
#Visualize most frequent mechanisms for severe Hemophilia variants
# Bar plot for mechanism frequency
ggplot(mechanism_count_sev, aes(x = reorder(mechanism, n), y = n)) +
geom_bar(stat = "identity", fill = "lightgreen") +
coord_flip() +
labs(title = "Frequency of Mechanisms",
x = "Mechanism",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
# Create a grouped bar plot for variant_type and mechanism
ggplot(severe_hemo_cleaned, aes(x = variant_type, fill = mechanism)) +
geom_bar(position = "fill") +
labs(title = "Distribution of Variant Type by Mechanism
for Severe Hemophilia",
x = "Variant Type",
y = "Proportion",
fill = "Mechanism") +
theme(plot.title = element_text(hjust = 0.2)) +
theme_minimal() +
coord_flip()
